-- Service Initializations
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local ServerScriptService = game:GetService("ServerScriptService")
local WorkspaceService = game:GetService("Workspace")
local MarketplaceService = game:GetService("MarketplaceService")
local HTTPService = game:GetService("HttpService")
local Players = game:GetService("Players")

-- Module Dependencies and Path References
local ServerPets = WorkspaceService.ServerPets
local uxpRS = ReplicatedStorage.uxpRS
local uxpSSS = ServerScriptService.uxpSSS
local PetSystemRS = uxpRS.PetSystem
local PetSystemSSS = uxpSSS.PetSystem
local PetHanderModule = require(PetSystemSSS.PetHanderModule)
local Manager = require(uxpSSS.ProfileService.Manager)
local PetHatchList = require(PetSystemSSS.PetServerHander.PetHatchList)
local PetSystemSettings = require(PetSystemRS.PetSystemSettings)
local PlayerData = require(PetSystemRS.PlayerData)
local GlobalPetCount = require(PetSystemSSS.GlobalPetCount)

-- Handler for Robux pet purchases
-- Processes the purchase completion and applies luck boosts from gamepasses
MarketplaceService.PromptProductPurchaseFinished:Connect(function(playerId, assetId, isPruchased)
    local Player = Players:GetPlayerByUserId(playerId)
    local Profile = Manager.Profiles[Player]
    
    if isPruchased then
        -- Iterate through available pets to find matching asset
        for i, PrizeTable in pairs(PetHatchList) do
            if PrizeTable.RobuxPet and PrizeTable.DevID == assetId then
                -- Calculate cumulative luck boost from owned gamepasses
                local GeneralLuckBoost = 0
                if PlayerData.GivePlayerData(PlayerData, Player).Luck1Gamepass then
                    GeneralLuckBoost += PetSystemSettings.LuckRate.Luck1
                end
                if PlayerData.GivePlayerData(PlayerData, Player).Luck2Gamepass then
                    GeneralLuckBoost += PetSystemSettings.LuckRate.Luck2
                end
                if PlayerData.GivePlayerData(PlayerData, Player).Luck3Gamepass then
                    GeneralLuckBoost += PetSystemSettings.LuckRate.Luck3
                end
                
                -- Apply luck boost to pet chances
                for i, Chance in pairs(PrizeTable.PetList) do
                    PrizeTable[i] = Chance + GeneralLuckBoost
                end
                
                -- Weighted random selection system for pet rewards
                local Weight = 0
                for i, Chance in pairs(PrizeTable.PetList) do
                    Weight += (Chance * 1000) -- Multiply by 1000 to handle decimal chances
                end
                
                local ranNumber = math.random(1, Weight)
                Weight = 0
                
                -- Select pet based on cumulative weights
                for petName, Chance in pairs(PrizeTable.PetList) do
                    Weight += (Chance * 1000)
                    if Weight >= ranNumber then
                        -- Create new pet instance with default properties
                        table.insert(Profile.Data.PetSystem.Pets, {
                            PetName = petName,
                            PetType = "Normal",
                            UUID = HTTPService:GenerateGUID(),
                            Equiped = false,
                            Locked = false,
                            Tradeable = true,
                        })
                        
                        -- Update global pet statistics
                        GlobalPetCount.CountPet(petName)
                        
                        -- Handle pet index for collection tracking
                        if Profile.Data.PetSystem.Index == nil then
                            table.insert(Profile.Data.PetSystem.Index, petName)
                            PetSystemRS.GlobalEvents.RemoteEvent:FireClient(Player, "PetPurchaseEvent", true, petName)
                            return
                        end
                        
                        -- Check if pet is already in player's index
                        for i,v in pairs(Profile.Data.PetSystem.Index) do
                            if v == petName then     
                                PetSystemRS.GlobalEvents.RemoteEvent:FireClient(Player, "PetPurchaseEvent", true, petName) 
                                return
                            end
                        end
                        table.insert(Profile.Data.PetSystem.Index, petName)
                    end
                end
            end
        end
    end
end)

-- Remote Event Handler for Various Pet Operations
PetSystemRS.GlobalEvents.RemoteEvent.OnServerEvent:Connect(function(player, rtype, value1, value2, value3)
    -- Handle crafting golden pets
    if rtype == "GoldCraftEvent" then
        local Profile = Manager.Profiles[player]
        local nameList = {}
        local deleteCount = 0
        
        -- Remove selected pets and track their names
        for _, v in pairs(value1) do
            for i1, v1 in pairs(Profile.Data.PetSystem.Pets) do
                if v1.UUID == v then
                    table.remove(Profile.Data.PetSystem.Pets, i1)
                    table.insert(nameList, v1.PetName)
                    deleteCount += 1
                    break
                end
            end
        end
        
        -- Verify all pets are the same type
        local firstName = nameList[1]
        if #value1 > 1 then
            for _, name in pairs(nameList) do
                if name ~= firstName then
                    return
                end
            end
        end
        
        -- Probability system for golden pet creation
        if #value1 == deleteCount then
            local Number = math.random(1, 5)
            local shouldCreateGoldenPet = false
            
            -- Success chance increases with more pets used
            if deleteCount == 5 then
                shouldCreateGoldenPet = true
            elseif deleteCount == 4 and Number <= 4 then
                shouldCreateGoldenPet = true
            elseif deleteCount == 3 and Number <= 3 then
                shouldCreateGoldenPet = true
            elseif deleteCount == 2 and Number <= 2 then
                shouldCreateGoldenPet = true
            elseif deleteCount == 1 and Number == 1 then
                shouldCreateGoldenPet = true
            end
            
            -- Create golden pet if successful
            if shouldCreateGoldenPet then
                local newPet = {
                    PetName = "Golden" .. firstName,
                    PetType = "Golden",
                    UUID = HTTPService:GenerateGUID(),
                    Equiped = false,
                    Locked = false,
                    Tradeable = true,
                }
                table.insert(Profile.Data.PetSystem.Pets, newPet)
                GlobalPetCount.CountPet("Golden"..firstName)
                PetSystemRS.GlobalEvents.RemoteEvent:FireClient(player, "NotifyEvent", PetSystemSettings.Messages.MergeSucces[1], PetSystemSettings.Messages.MergeSucces[2])
            else
                PetSystemRS.GlobalEvents.RemoteEvent:FireClient(player, "NotifyEvent", PetSystemSettings.Messages.MergeFail[1], PetSystemSettings.Messages.MergeFail[2])
            end
        end
        
    -- Similar logic for rainbow pet crafting
    elseif rtype == "RainbowCraftEvent" then
        -- [Rainbow crafting logic similar to golden crafting, with different probability rates]
        
    -- Handle pet deletion
    elseif rtype == "DeleteEvent" then
        local Profile = Manager.Profiles[player]
        for i,v in ipairs(Profile.Data.PetSystem.Pets) do
            if v.UUID == value1 then
                table.remove(Profile.Data.PetSystem.Pets, i)
                return
            end
        end
        
    -- Handle unequipping pets
    elseif rtype == "UnEquipEvent" then
        local Profile = Manager.Profiles[player]
        for i,v in pairs(Profile.Data.PetSystem.Pets) do
            if value1 == v.UUID then
                v.Equiped = false
                PetHanderModule.UnequipPet(player, v.PetName)
                PetSystemRS.GlobalEvents.RemoteEvent:FireClient(player, "UnequipPetEvent")
                return
            end
        end
        
    -- Toggle fast opening feature based on gamepass
    elseif rtype == "FastOpenEvent" then
        if PlayerData.GivePlayerData(PlayerData, player).AutoOpenGamepass then
            player.FastOpenEnabled.Value = false
        else
            player.FastOpenEnabled.Value = true
        end
    end
end)

-- Remote Function Handler for Pet System Queries and Actions
PetSystemRS.GlobalEvents.RemoteFunction.OnServerInvoke = function(player, rtype, value1, value2, value3)
    -- Return player's pet index
    if rtype == "GetIndexEvent" then
        local Profile = Manager.Profiles[player]
        return Profile.Data.PetSystem.Index
        
    -- Return player's data
    elseif rtype == "GetPlayerDataEvent" then
        return PlayerData.GivePlayerData(PlayerData, player)
        
    -- Handle pet equipping with slot limit validation
    elseif rtype == "EquipEvent" then
        local Profile = Manager.Profiles[player]
        local EquipedPetsCount = 0
        
        -- Count currently equipped pets
        for i,v in pairs(Profile.Data.PetSystem.Pets) do
            if v.Equiped then
                EquipedPetsCount += 1
            end
        end
        
        -- Check if player has reached their pet slot limit
        if EquipedPetsCount >= Profile.Data.PetSystem.PetEquipSlot then
            PetSystemRS.GlobalEvents.RemoteEvent:FireClient(player, "NotifyEvent", PetSystemSettings.Messages.MaxEquip[1], PetSystemSettings.Messages.MaxEquip[2])
            return false
        end
        
        -- Equip the pet if slot is available
        for i,v in pairs(Profile.Data.PetSystem.Pets) do
            if value1 == v.UUID then
                v.Equiped = true
                PetHanderModule.EquipPet(player, v.PetName)
                return true
            end
        end
    
    -- Handle trade status checks and requests
    elseif rtype == "TradeStatusEvent" then
        if Players:FindFirstChild(tostring(value1)) then
            local PDFull = PlayerData.GivePlayerData(PlayerData, player)
            local TargetPlayer = Players:FindFirstChild(tostring(value1))
            
            -- Validate trade conditions
            if TargetPlayer == player then
                PetSystemRS.GlobalEvents.RemoteEvent:FireClient(player, "NotifyEvent", PetSystemSettings.Messages.CantTradeSelf[1], PetSystemSettings.Messages.CantTradeSelf[2])
                return false
            end
            if PDFull.TradeOpen == false then
                PetSystemRS.GlobalEvents.RemoteEvent:FireClient(player, "NotifyEvent", PetSystemSettings.Messages.TradesClosed[1], PetSystemSettings.Messages.TradesClosed[2])
                return false
            end
            if PDFull.Trading then
                PetSystemRS.GlobalEvents.RemoteEvent:FireClient(player, "NotifyEvent", PetSystemSettings.Messages.AlreadyTrading[1], PetSystemSettings.Messages.AlreadyTrading[2])
                return false
            end
            
            -- Send trade request to target player
            PetSystemRS.GlobalEvents.RemoteEvent:FireClient(TargetPlayer, "TradeReqEvent", player)
            PlayerData.EditPlayerData(PlayerData, player, "LastTradeReq", TargetPlayer.Name)
        else
            PetSystemRS.GlobalEvents.RemoteEvent:FireClient(player, "NotifyEvent", PetSystemSettings.Messages.PlayerNotFound[1], PetSystemSettings.Messages.PlayerNotFound[2])
        end
        
    -- Get pet statistics
    elseif rtype == "PetStatsEvent" then
        local Profile = Manager.Profiles[player]
        local EquipedPetsCount = 0
        
        -- Count equipped pets
        for i,v in pairs(Profile.Data.PetSystem.Pets) do
            if v.Equiped then
                EquipedPetsCount += 1
            end
        end
        
        -- Return comprehensive pet statistics
        local PetCount = GlobalPetCount.GetPetCounts()
        return Profile.Data.PetSystem.PetEquipSlot, Profile.Data.PetSystem.PetBackpackSlot, #Profile.Data.PetSystem.Pets, EquipedPetsCount, PetCount
        
    -- Toggle pet lock status
    elseif rtype == "LockEvent" then
        local Profile = Manager.Profiles[player]
        for i,v in ipairs(Profile.Data.PetSystem.Pets) do
            if v.UUID == value1 then
                v.Locked = not v.Locked -- Toggle lock status
                return
            end
        end
        
    -- Get list of unequipped pets
    elseif rtype == "GetPetsEvent" then
        local Profile = Manager.Profiles[player]
        local equipedPets = {}
        for i,v in pairs(Profile.Data.PetSystem.Pets) do
            if not v.Equiped then
                table.insert(equipedPets, v)
            end
        end
        return equipedPets
        
    -- Get list of equipped pets
    elseif rtype == "GetEquipedPetsEvent" then
        local Profile = Manager.Profiles[player]
        local equipedPets = {}
        for i,v in pairs(Profile.Data.PetSystem.Pets) do
            if v.Equiped then
                table.insert(equipedPets, v)
            end
        end
        return equipedPets
        
    -- Handle pet opening/hatching system
    elseif rtype == "PetOpenEvent" then
        local Profile = Manager.Profiles[player]
        
        for i, PrizeTable in pairs(PetHatchList) do
            if i == value1 then
                -- Check if player has enough inventory space
                if #Profile.Data.PetSystem.Pets >= Profile.Data.PetSystem.PetBackpackSlot then
                    PetSystemRS.GlobalEvents.RemoteEvent:FireClient(player, "NotifyEvent", PetSystemSettings.Messages.MaxSpace[1], PetSystemSettings.Messages.MaxSpace[2])
                    return false
                end
                
                -- Handle opening cooldown timer
                local Timer = script.PlayerData:FindFirstChild(player.Name)
                if Timer then
                    if Timer.Value > os.time() then return false end
                    if player.FastOpenEnabled.Value then
                        Timer.Value = os.time() + 3
                    else
                        Timer.Value = os.time() + 5
                    end
                else
                    local TimerValue = Instance.new("IntValue")
                    TimerValue.Name = player.Name
                    TimerValue.Parent = script.PlayerData
                    if player.FastOpenEnabled.Value then
                        TimerValue.Value = os.time() + 3.5
                    else
                        TimerValue.Value = os.time() + 5.5
                    end
                end
                
                -- Handle different opening modes (single, 3x, 8x)
                if value2 == 1 then
                    -- Single pet opening logic
                    if player:WaitForChild(PetSystemSettings.CurrencyFolder):FindFirstChild(PetSystemSettings.Currency).Value >= PrizeTable.Price then
                        -- Deduct currency and apply luck boosts
                        player:WaitForChild(PetSystemSettings.CurrencyFolder):FindFirstChild(PetSystemSettings.Currency).Value -= PrizeTable.Price
                        
                        -- Calculate luck boost from gamepasses
                        local GeneralLuckBoost = 0
                        if PlayerData.GivePlayerData(PlayerData, player).Luck1Gamepass then
                            GeneralLuckBoost += PetSystemSettings.LuckRate.Luck1
                        end
                        if PlayerData.GivePlayerData(PlayerData, player).Luck2Gamepass then
                            GeneralLuckBoost += PetSystemSettings.LuckRate.Luck2
                        end
                        if PlayerData.GivePlayerData(PlayerData, player).Luck3Gamepass then
                            GeneralLuckBoost += PetSystemSettings.LuckRate.Luck3
                        end
                        
                        -- Apply luck boost to pet chances
                        for i, Chance in pairs(PrizeTable.PetList) do
                            PrizeTable[i] = Chance + GeneralLuckBoost
                        end
                        
                        -- Weighted random selection for pet
                        local Weight = 0
                        for i, Chance in pairs(PrizeTable.PetList) do
                            Weight += (Chance * 1000)
                        end
                        local ranNumber = math.random(1, Weight)
                        Weight = 0
                        
                        -- Select and award pet based on weights
                        for petName, Chance in pairs(PrizeTable.PetList) do
                            Weight += (Chance * 1000)
                            if Weight >= ranNumber then
                                -- Check if pet should be deleted (based on value3 filter)
                                local delete = false
                                for z, y in pairs(value3) do
                                    if y == petName then
                                        delete = true
                                        break
                                    end
                                end
                                
                                -- Create new pet if not filtered
                                if not delete then
                                    table.insert(Profile.Data.PetSystem.Pets, {
                                        PetName = petName,
                                        PetType = "Normal",
                                        UUID = HTTPService:GenerateGUID(),
                                        Equiped = false,
                                        Locked = false,
                                        Tradeable = true,
                                    })
                                    GlobalPetCount.CountPet(petName)
                                    
                                    -- Update pet index
                                    if Profile.Data.PetSystem.Index == nil then
                                        table.insert(Profile.Data.PetSystem.Index, petName)
                                        return true, petName
                                    end
                                    
                                    -- Check if pet is already in index
                                    for i,v in pairs(Profile.Data.PetSystem.Index) do
                                        if v == petName then return true, petName end
                                    end
                                    table.insert(Profile.Data.PetSystem.Index, petName)
                                end
                                return true, petName
                            end
                        end
                    else
                        -- Handle insufficient currency
                        PetSystemRS.GlobalEvents.RemoteEvent:FireClient(player, "NotifyEvent", PetSystemSettings.Messages.InsufficientBalance[1], PetSystemSettings.Messages.InsufficientBalance[2])
                        return false
                    end
                    
                -- Handle 3x opening (similar logic with multiple pets)
                elseif value2 == 3 then
                    -- Verify player has 3x opening gamepass
                    if not PlayerData.GivePlayerData(PlayerData, player).Open3xGamepass then
                        PetSystemRS.GlobalEvents.RemoteEvent:FireClient(player, "NotifyEvent", PetSystemSettings.Messages.NeedGamepass[1], PetSystemSettings.Messages.NeedGamepass[2])
                        MarketplaceService:PromptGamePassPurchase(player, PetSystemSettings.Gamepass.Open3x)
                        return false
                    end
                    
                    -- Check if player has enough space for 3 pets
                    if #Profile.Data.PetSystem.Pets + 2 >= Profile.Data.PetSystem.PetBackpackSlot then
                        PetSystemRS.GlobalEvents.RemoteEvent:FireClient(player, "NotifyEvent", PetSystemSettings.Messages.NoSpace[1], PetSystemSettings.Messages.NoSpace[2])
                        return false
                    end
                    
                    -- Verify player has enough currency for 3x opening
                    if player:WaitForChild(PetSystemSettings.CurrencyFolder):FindFirstChild(PetSystemSettings.Currency).Value >= PrizeTable.Price * 3 then
                        -- Deduct currency for 3x opening
                        player:WaitForChild(PetSystemSettings.CurrencyFolder):FindFirstChild(PetSystemSettings.Currency).Value -= PrizeTable.Price * 3
                        
                        local PetNames = {}
                        -- Process 3 pet openings
                        for i = 1, 3, 1 do
                            -- Calculate luck boost from gamepasses
                            local GeneralLuckBoost = 0
                            if PlayerData.GivePlayerData(PlayerData, player).Luck1Gamepass then
                                GeneralLuckBoost += PetSystemSettings.LuckRate.Luck1
                            end
                            if PlayerData.GivePlayerData(PlayerData, player).Luck2Gamepass then
                                GeneralLuckBoost += PetSystemSettings.LuckRate.Luck2
                            end
                            if PlayerData.GivePlayerData(PlayerData, player).Luck3Gamepass then
                                GeneralLuckBoost += PetSystemSettings.LuckRate.Luck3
                            end
                            
                            -- Apply luck boost to pet chances
                            for i, Chance in pairs(PrizeTable.PetList) do
                                PrizeTable[i] = Chance + GeneralLuckBoost
                            end
                            
                            -- Calculate total weight for weighted random selection
                            local Weight = 0
                            for i, Chance in pairs(PrizeTable.PetList) do
                                Weight += (Chance * 1000)
                            end
                            local ranNumber = math.random(1, Weight)
                            Weight = 0
                            
                            -- Select pet based on weights
                            for petName, Chance in pairs(PrizeTable.PetList) do
                                Weight += (Chance * 1000)
                                if Weight >= ranNumber then
                                    -- Check if pet should be filtered out
                                    local delete = false
                                    for z, y in pairs(value3) do
                                        if y == petName then
                                            delete = true
                                            break
                                        end
                                    end
                                    
                                    -- Create and add new pet if not filtered
                                    if not delete then
                                        table.insert(Profile.Data.PetSystem.Pets, {
                                            PetName = petName,
                                            PetType = "Normal",
                                            UUID = HTTPService:GenerateGUID(),
                                            Equiped = false,
                                            Locked = false,
                                            Tradeable = true,
                                        })
                                        GlobalPetCount.CountPet(petName)
                                        
                                        -- Initialize index if needed
                                        if Profile.Data.PetSystem.Index == nil then
                                            table.insert(Profile.Data.PetSystem.Index, petName)
                                        end
                                        
                                        -- Check if pet is already in index
                                        local found = false
                                        for i,v in pairs(Profile.Data.PetSystem.Index) do
                                            if v == petName then 
                                                found = true
                                            end
                                        end
                                        if not found then
                                            table.insert(Profile.Data.PetSystem.Index, petName)
                                        end
                                    end
                                    table.insert(PetNames, petName)
                                    break
                                end
                            end
                        end
                        return true, PetNames
                    else
                        -- Handle insufficient currency
                        PetSystemRS.GlobalEvents.RemoteEvent:FireClient(player, "NotifyEvent", PetSystemSettings.Messages.InsufficientBalance[1], PetSystemSettings.Messages.InsufficientBalance[2])
                        return false
                    end
                    
                elseif value2 == 8 then
                    -- Verify player has 8x opening gamepass
                    if not PlayerData.GivePlayerData(PlayerData, player).Open8xGamepass then
                        PetSystemRS.GlobalEvents.RemoteEvent:FireClient(player, "NotifyEvent", PetSystemSettings.Messages.NeedGamepass[1], PetSystemSettings.Messages.NeedGamepass[2])
                        MarketplaceService:PromptGamePassPurchase(player, PetSystemSettings.Gamepass.Open8x)
                        return false
                    end
                    
                    -- Check if player has enough space for 8 pets
                    if #Profile.Data.PetSystem.Pets + 7 >= Profile.Data.PetSystem.PetBackpackSlot then
                        PetSystemRS.GlobalEvents.RemoteEvent:FireClient(player, "NotifyEvent", PetSystemSettings.Messages.NoSpace[1], PetSystemSettings.Messages.NoSpace[2])
                        return false
                    end
                    
                    -- Verify player has enough currency for 8x opening
                    if player:WaitForChild(PetSystemSettings.CurrencyFolder):FindFirstChild(PetSystemSettings.Currency).Value >= PrizeTable.Price * 8 then
                        -- Deduct currency for 8x opening
                        player:WaitForChild(PetSystemSettings.CurrencyFolder):FindFirstChild(PetSystemSettings.Currency).Value -= PrizeTable.Price * 8
                        
                        local PetNames = {}
                        -- Process 8 pet openings
                        for i = 1, 8, 1 do
                            -- Calculate luck boost from gamepasses
                            local GeneralLuckBoost = 0
                            if PlayerData.GivePlayerData(PlayerData, player).Luck1Gamepass then
                                GeneralLuckBoost += PetSystemSettings.LuckRate.Luck1
                            end
                            if PlayerData.GivePlayerData(PlayerData, player).Luck2Gamepass then
                                GeneralLuckBoost += PetSystemSettings.LuckRate.Luck2
                            end
                            if PlayerData.GivePlayerData(PlayerData, player).Luck3Gamepass then
                                GeneralLuckBoost += PetSystemSettings.LuckRate.Luck3
                            end
                            
                            -- Apply luck boost to pet chances
                            for i, Chance in pairs(PrizeTable.PetList) do
                                PrizeTable[i] = Chance + GeneralLuckBoost
                            end
                            
                            -- Calculate total weight for weighted random selection
                            local Weight = 0
                            for i, Chance in pairs(PrizeTable.PetList) do
                                Weight += (Chance * 1000)
                            end
                            local ranNumber = math.random(1, Weight)
                            Weight = 0
                            
                            -- Select pet based on weights
                            for petName, Chance in pairs(PrizeTable.PetList) do
                                Weight += (Chance * 1000)
                                if Weight >= ranNumber then
                                    -- Check if pet should be filtered out
                                    local delete = false
                                    for z, y in pairs(value3) do
                                        if y == petName then
                                            delete = true
                                            break
                                        end
                                    end
                                    
                                    -- Create and add new pet if not filtered
                                    if not delete then
                                        table.insert(Profile.Data.PetSystem.Pets, {
                                            PetName = petName,
                                            PetType = "Normal",
                                            UUID = HTTPService:GenerateGUID(),
                                            Equiped = false,
                                            Locked = false,
                                            Tradeable = true,
                                        })
                                        GlobalPetCount.CountPet(petName)
                                        
                                        -- Initialize index if needed
                                        if Profile.Data.PetSystem.Index == nil then
                                            table.insert(Profile.Data.PetSystem.Index, petName)
                                        end
                                        
                                        -- Check if pet is already in index
                                        local found = false
                                        for i,v in pairs(Profile.Data.PetSystem.Index) do
                                            if v == petName then 
                                                found = true
                                            end
                                        end
                                        if not found then
                                            table.insert(Profile.Data.PetSystem.Index, petName)
                                        end
                                    end
                                    table.insert(PetNames, petName)
                                    break
                                end
                            end
                        end
                        return true, PetNames
                    else
                        -- Handle insufficient currency
                        PetSystemRS.GlobalEvents.RemoteEvent:FireClient(player, "NotifyEvent", PetSystemSettings.Messages.InsufficientBalance[1], PetSystemSettings.Messages.InsufficientBalance[2])
                        return false
                    end
                end
            end
        end     
    end
end
